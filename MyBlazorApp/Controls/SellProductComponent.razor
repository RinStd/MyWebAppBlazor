@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if (productToSell != null)
{
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <br/>
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        
        <div class="form-group">
            <label for="name">Product Name</label>
            <input id="name" class="form-control" type="text" readonly value="@productToSell.Name" />
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <input id="price" class="form-control" type="text" readonly value="@(string.Format("{0:c}",productToSell.Price))" />
        </div>

        <div class="form-group">
            <label for="quantity">Product Quantity</label>
            <InputNumber id="quantity" class="form-control" @bind-Value="@productToSell.Quantity"></InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>
}

@code {
    private Product productToSell;
    private string errorMessage;

    [Parameter]
    public string CashierName  { get; set; }

    [Parameter]
    public Product SelectedProduct { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        @if (SelectedProduct != null)
        {
            productToSell = new Product
                {
                    ProductId = SelectedProduct.ProductId,
                    Name = SelectedProduct.Name,
                    CategoryId = SelectedProduct.CategoryId,
                    Price = SelectedProduct.Price,
                    Quantity = SelectedProduct.Quantity
                };
        }
        else
        {
            productToSell = null;
        }
    }

    private void SellProduct()
    {
        if (string.IsNullOrWhiteSpace(CashierName))
        {
            errorMessage = "The Cashier`s name is missing.";
            return;
        }

        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);
        if (productToSell.Quantity <= 0)
        {
            errorMessage = "The quantity has to be greater has zero.";
        }
        else if (product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity.Value);
        }
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left. It is not enough.";
        }
    }
}
